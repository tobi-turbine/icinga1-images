#! /bin/bash

#########THIS part is for Nagios ################################
PROGNAME=`/usr/bin/basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1749 $' | sed -e 's/[^0-9.]//g'`
. $PROGPATH/utils.sh

#####################################################################

#Function to print Usage
function usage
{
echo "Usage: $0 -s [apiserver endpoint] -i [incomplete warning] -I [incomplete critical]"
exit $STATE_UNKNOWN
}

UNBOUNDWARN=1
UNBOUND_CRIT=2
APISERVER=https://kubernetes.default.svc
#####################################################################
# get parameter values in Variables

while test -n "$1"; do
    case "$1" in
         -h)
            usage
            ;;
         -i)
            UNBOUND_WARN=$2
            shift
            ;;
         -I)
            UNBOUND_CRIT=$2
            shift
            ;;
         -s)
            APISERVER=$2
            shift
            ;;
         *)
            echo "Unknown argument: $1"
            usage
            ;;
    esac
    shift
done

#####################################################################

TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
KUBECTL="kubectl --server $APISERVER --token $TOKEN --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"

STATUS=$( $KUBECTL version 2>&1 )
if [ $? -ne 0 ]; then
        echo "[ERR] failed to connect to apiserver: $STATUS"
        exit $STATE_CRITICAL
fi
if [ "$STATUS" == "" ]; then
        echo "[UNKNOWN] no answer"
        exit $STATE_UNKNOWN
fi

ALL_PODS=$( $KUBECTL --all-namespaces=true get pvc --no-headers=true )
UNBOUND_PVCS=$( echo "$ALL_PODS" | grep Unbound | awk -F ' ' '{print $3}' | awk -F / '{ if ($1 != $2) print "incomplete" }' | wc -l )
if [ "$UNBOUND_PVCS" -ge "$UNBOUND_WARN" ]; then
        echo "[WARN] $UNBOUND_PVCS pvs are in a unbound state"
        exit $STATE_WARNING
fi
if [ "$UNBOUND_PVCS" -ge "$UNBOUND_CRIT" ]; then
        echo "[CRIT] $UNBOUND_PVCS pvs are in a unbound state"
        exit $STATE_CRITICAL
fi

echo "[OK] rook are in a healthy state"
exit $STATE_OK
