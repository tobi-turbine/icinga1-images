#! /bin/bash
set -euo pipefail

#########THIS part is for Nagios ################################
PROGNAME=`/usr/bin/basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1749 $' | sed -e 's/[^0-9.]//g'`
. $PROGPATH/utils.sh

#####################################################################

#Function to print Usage
function usage
{
echo "Usage: $0 -s [apiserver endpoint] -r [not running warning] -R [not running critical] -i [incomplete warning] -I [incomplete critical]"
exit $STATE_UNKNOWN
}

NOT_RUNNING_WARN=1
NOT_RUNNING_CRIT=2
INCOMPLETE_WARN=1
INCOMPLETE_CRIT=2
APISERVER=https://kubernetes.default.svc
#####################################################################
# get parameter values in Variables

while test -n "$1"; do
    case "$1" in
         -h)
            usage
            ;;
         -r)
            NOT_RUNNING_WARN=$2
            shift
            ;;
         -R)
            NOT_RUNNING_CRIT=$2
            shift
            ;;
         -i)
            INCOMPLETE_WARN=$2
            shift
            ;;
         -I)
            INCOMPLETE_CRIT=$2
            shift
            ;;
         -s)
            APISERVER=$2
            shift
            ;;
         *)
            echo "Unknown argument: $1"
            usage
            ;;
    esac
    shift
done

#####################################################################

TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
KUBECTL="kubectl --server $APISERVER --token $TOKEN --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"


STATUS=$( $KUBECTL version 2>&1 )
if [ $? -ne 0 ]; then
        echo "[ERR] failed to connect to apiserver: $STATUS"
        exit $STATE_CRITICAL
fi
if [ "$STATUS" == "" ]; then
        echo "[UNKNOWN] no answer"
        exit $STATE_UNKNOWN
fi

OLD=$( tempfile )
NEW=$( tempfile )
curl --silent --fail 'http://metrics-prometheus-operato-prometheus.metrics.svc:9090/api/v1m/query?query=kube_pod_status_phase\{job="kube-state-metrics",namespace!~".*ci.*",phase=~"Pending|Unknown|Terminating"\}%20offset%205m%20>0' | jq -M -r '.data.result[].metric | "\(.namespace)/\(.pod)"' > ${OLD}
curl --silent --fail 'http://metrics-prometheus-operato-prometheus.metrics.svc:9090/api/v1/query?query=kube_pod_status_phase\{job="kube-state-metrics",namespace!~".*ci.*",phase=~"Pending|Unknown|Terminating"\}>0' | jq -M -r '.data.result[].metric | "\(.namespace)/\(.pod)"' > ${NEW}
NOT_RUNNING=$( cat ${OLD} ${NEW} | sort | uniq -c | awk '{ if ($1 >= 2) print $2 }' )
NOT_RUNNING_COUNT=$( echo -n "$NOT_RUNNING" | wc -l )
rm ${OLD} ${NEW}
if [ "$NOT_RUNNING_COUNT" -ge "$NOT_RUNNING_WARN" ]; then
        echo "[WARN] $NOT_RUNNING pods are not running: $NOT_RUNNING"
        exit $STATE_WARNING
fi
if [ "$NOT_RUNNING_COUNT" -ge "$NOT_RUNNING_CRIT" ]; then
        echo "[CRIT] $NOT_RUNNING pods are not running: $NOT_RUNNING"
        exit $STATE_CRITICAL
fi

ALL_PODS=$( $KUBECTL --all-namespaces=true get po --no-headers=true | grep -v -e '^ci\-' | grep -v '\-ci\-'  )
INCOMPLETE_PODS=$( echo "$ALL_PODS" | grep Running | awk -F ' ' '{print $3}' | awk -F / '{ if ($1 != $2) print "incomplete" }' | wc -l )
if [ "$INCOMPLETE_PODS" -ge "$INCOMPLETE_WARN" ]; then
        echo "[WARN] $INCOMPLETE_PODS pods are in a incomplete state"
        exit $STATE_WARNING
fi
if [ "$INCOMPLETE_PODS" -ge "$INCOMPLETE_CRIT" ]; then
        echo "[CRIT] $INCOMPLETE_PODS pods are in a incomplete state"
        exit $STATE_CRITICAL
fi

echo "[OK] all pods look healthy"
exit $STATE_OK
